
"""
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

"""


"""

Написать два алгоритма нахождения i-го по счёту простого числа.
"""
# Без использования «Решета Эратосфена»

# в ходе замеров видно, что при поиске до 10 000 цифр идёт линейная зависимость по времени, затем логарифмическая
# могу ошибаться, но либо O(n), либо O(n log n)

# что касается оценки зависимости от количества итерации, то на мой взляд O(n^2)

"""
пространственная сложность в примере ниже будет зависеть от ряда переменных:
- число, которое вводит пользователь - О(1)
- переменные i и  j = O(1)
- память под список result O(n)
При использовании алгоритма "Решето Эратосфена", временная сложность будет выигрывать, но вот пространственная сложность 
будет проигрвать, т.к. при его использовании необходимо изначально создать исходный список
с избыточным количеством элементов, а затем ещё создать результирующий список

"""



import time
from sys import getsizeof as gsof

total_size = 0

result = []
user_input = int(input(f'Введите икомое количество простых чисел: '))

total_size += gsof(user_input)

time_start = time.time()

i = 3
result.append(2)

while len(result) < user_input:
    for j in result:
        if (j * 2) > i:
            result.append(i)
            break
        if not i % j:
            break
    else:
        result.append(i)
    i += 2
time_fin = time.time()

print(result)
print(time_fin - time_start, 'c')

print(len(result))
total_size += gsof(result)

print(total_size)