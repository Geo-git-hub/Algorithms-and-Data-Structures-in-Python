"""
Проанализировать скорость и сложность одного любого алгоритма, разработанных в
рамках практического задания первых трех уроков.
"""

# что касается алгоритма ниже, если рассматривать то как мы получаем максимальное значение при
# помощи функции max() как одну итерацию, сто сложность O(1), если представить,
# что внутри функция выполняет сравнение всех элементов из списка, то сложность составит  O(n),
# хотя, при анализе на примерах, массив с 4 000 000 элементов обрабатывается за сотые секунды, можно сделать вывод,
# что функция max() использует другой алгоритм внутри и  онатация ближе к логарифмической

# В массиве найти максимальный отрицательный элемент. Вывести на экран его значение и позицию в массиве.


from random import randint
from time import time

init_random_list = [randint(-100, -1) for el in range(4000000)]
print(init_random_list)

# print(sorted(init_random_list)) # для наглядности
time_start = time()

max_el = max(init_random_list)
max_index = init_random_list.index(max_el)

print(time() - time_start, 'c')
print(f'Макс элемент {max_el} на {max_index + 1} позиции')